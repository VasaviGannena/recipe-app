{"version":3,"sources":["Modal/CreateRecipe.js","Modal/EditRecipes.js","Components/Card.js","Components/RecipeList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateRecipe","modal","toggle","save","useState","RecipeName","setRecipeName","Ingredients","setIngredients","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","row","ModalFooter","Button","color","onClick","RecipeObj","EditRecipes","UpdateRecipe","useEffect","ingredients","preventDefault","tempObj","Card","index","deleteRecipe","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","id","obj","RecipeList","setRecipeList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f13b3fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst CreateRecipe = ({ modal, toggle, save }) => {\n    \n    const [RecipeName, setRecipeName] = useState('');\n    const [Ingredients, setIngredients] = useState('');\n\n    const handleChange = (e) => {\n\n        const { name, value } = e.target\n\n        if (name === \"RecipeName\") {\n        setRecipeName(value)\n        } else {\n        setIngredients(value)\n        }\n\n    }\n\n    const handleSave = () => {\n        let RecipeObj = {}\n        RecipeObj[\"name\"] = RecipeName\n        RecipeObj[\"ingredient\"] = Ingredients\n        save(RecipeObj)\n        \n    \n\n    }\n\n    return (\n        \n        <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>AddRecipes</ModalHeader>\n            <ModalBody>\n                <form>\n                    <div className=\"form-group\">\n                        <label>RecipeName</label>\n                        <input type=\"text\" className=\"form-control\" value={RecipeName} onChange={handleChange} name = \"RecipeName\"/>\n\n                    </div>\n                    <div className=\"from-group\">\n                        <label>Ingredients</label>\n                        <textarea row = \"4\" className=\"form-control\" value = {Ingredients} onChange = {handleChange} name = \"Ingredients\"></textarea>\n                        \n                    </div>\n                </form>\n        </ModalBody>\n        <ModalFooter>\n        <Button color=\"primary\" onClick={handleSave}>Add</Button>{' '}\n        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n            </Modal>\n            \n    );\n};\n\nexport default CreateRecipe;","import React, { useEffect, useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nconst EditRecipes = ({ modal, toggle, UpdateRecipe, RecipeObj }) => {\n    \n    const [RecipeName, setRecipeName] = useState('');\n    const [Ingredients, setIngredients] = useState('');\n\n    const handleChange = (e) => {\n\n        const { name, value } = e.target\n\n        if (name === \"RecipeName\") {\n        setRecipeName(value)\n        } else {\n        setIngredients(value)\n        }\n\n    }\n\n    useEffect(() => {\n        setRecipeName(RecipeObj.name)\n        setIngredients(RecipeObj.ingredients)\n    }, [UpdateRecipe, RecipeObj])\n\n    const handleUpdate = (e) => {\n        e.preventDefault();\n        let tempObj = {}\n        tempObj['name'] = RecipeName\n        tempObj['ingredients'] = Ingredients\n        UpdateRecipe(tempObj)\n        \n        }\n\n    return (\n        \n        <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>UpdateRecipes</ModalHeader>\n            <ModalBody>\n                <form>\n                    <div className=\"form-group\">\n                        <label>RecipeName</label>\n                        <input type=\"text\" className=\"form-control\" value={RecipeName} onChange={handleChange} name = \"RecipeName\"/>\n\n                    </div>\n                    <div className=\"from-group\">\n                        <label>Ingredients</label>\n                        <textarea row = \"4\" className=\"form-control\" value = {Ingredients} onChange = {handleChange} name = \"Ingredients\"></textarea>\n                        \n                    </div>\n                </form>\n        </ModalBody>\n        <ModalFooter>\n        <Button color=\"primary\" onClick={handleUpdate}>Update</Button>{' '}\n        <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter>\n            </Modal>\n            \n    );\n};\n\nexport default EditRecipes;","import React, { useState } from 'react';\nimport EditRecipes from '../Modal/EditRecipes';\n\nconst Card = ({ RecipeObj, index, deleteRecipe, updateListArray }) => {\n    const [modal, setModal] = useState(false);\n    \n     const colors = [\n        {\n            primaryColor : \"#5D93E1\",\n            secondaryColor : \"#ECF3FC\"\n        },\n        {\n            primaryColor : \"#F9D288\",\n            secondaryColor : \"#FEFAF1\"\n        },\n        {\n            primaryColor : \"#5DC250\",\n            secondaryColor : \"#F2FAF1\"\n        },\n        {\n            primaryColor : \"#F48687\",\n            secondaryColor : \"#FDF1F1\"\n        },\n        {\n            primaryColor : \"#B964F7\",\n            secondaryColor : \"#F3F0FD\"\n        }\n     ]\n     const toggle = () => {\n        setModal(!modal);\n     }\n    const UpdateRecipe = (obj) => {\n        updateListArray(obj, index)\n    }\n\n    const handleDelete = () => {\n        deleteRecipe(index)\n    }\n    return (\n        <div className=\"card-wrapper mr-3\">\n            <div class = \"card-top\" style={{\"background-color\": colors[index%5].primaryColor}}></div>\n            <div className=\"recipe-holder\">\n                <span className=\"card-header\" style={{ \"background-color\": colors[index % 5].secondaryColor, \"border-radius\": \"10px\" }}>{RecipeObj.name}</span>\n                <section id=\"textarea\" className=\"Ingredients\"><ul><li className=\"ingredients\" key={RecipeObj.ingredients}>{RecipeObj.ingredients}</li></ul></section>\n                \n\n                <div style={{\"position\": \"absolute\", \"right\" : \"20px\", \"bottom\" : \"20px\"}}>\n                    <i class = \"far fa-edit mb-3\" style={{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {() => setModal(true)}></i>\n                    <i class=\"fas fa-trash-alt\" style = {{\"color\" : colors[index%5].primaryColor, \"cursor\" : \"pointer\"}} onClick = {handleDelete}></i>\n                </div>\n                    \n            </div>\n\n            <EditRecipes modal = {modal} toggle = {toggle}  UpdateRecipe = {UpdateRecipe} RecipeObj = {RecipeObj}/>\n        </div>\n\n\n        \n        \n\n    );\n};\n\nexport default Card;","import React, { useEffect, useState } from 'react';\nimport CreateRecipe from '../Modal/CreateRecipe';\nimport Card from './Card';\n\nconst RecipeList = () => {\n    \n    const [modal, setModal] = useState(false);\n\n    const [RecipeList, setRecipeList] = useState([])\n\n    useEffect(() => {\n        let arr = localStorage.getItem(\"RecipeList\")\n        \n        if (arr) {\n            let obj = JSON.parse(arr)\n            setRecipeList(obj)\n        }\n    }, [])\n\n    const deleteRecipe = (index) => {\n        let tempList = RecipeList\n        tempList.splice(index, 1)\n        localStorage.setItem(\"RecipeList\", JSON.stringify(tempList))\n        setRecipeList(tempList)\n        window.location.reload()\n    }\n\n    const updateListArray = (obj, index) => {\n        let tempList = RecipeList\n        tempList[index] = obj\n        localStorage.setItem(\"RecipeList\", JSON.stringify(tempList))\n        setRecipeList(tempList)\n        window.location.reload()\n        \n    }\n\n    const toggle = () => setModal(!modal);\n\n\n    const saveRecipe = (RecipeObj) => {\n        let tempList = RecipeList\n        tempList.push(RecipeObj)\n        localStorage.setItem(RecipeList, JSON.stringify(tempList))\n        setRecipeList(tempList)\n        setModal(false)\n        \n    }\n    \n    return (\n        <>\n        <div className = \" header text-center\">\n            <h3>RecipesList</h3>\n            <button type=\"button\" className=\"btn btn-dark mt-2\" onClick = {() => setModal(true) }>AddRecipes</button>\n            </div>\n            <div className=\"recipe-container\">\n                {RecipeList && RecipeList.map((obj, index) => <Card RecipeObj={obj} index={index} deleteRecipe={deleteRecipe} updateListArray={updateListArray}/>)}\n\n            </div>\n            <CreateRecipe modal={modal} toggle={toggle} save={saveRecipe}/>\n            \n            </>\n    );\n};\n\nexport default RecipeList;","\nimport './App.css';\nimport RecipeList from './Components/RecipeList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RecipeList />\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}